/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * AIPark API
 * Í∏∞ÏóÖÏó∞Í≥Ñ ÌååÏù¥ÎÑê ÌîÑÎ°úÏ†ùÌä∏ API Î¨∏ÏÑú Î∞±ÏóîÎìú Í∞úÎ∞úÏö©
 * OpenAPI spec version: 1.0.0
 */
export type DownloadGeneratedAudio4Params = {
  bucketRoute: string;
};

export type DownloadGeneratedAudio3Params = {
  bucketRoute: string;
};

export type DownloadGeneratedAudio2Params = {
  bucketRoute: string;
};

export type DownloadGeneratedAudio1Params = {
  bucketRoute: string;
};

export type DownloadGeneratedAudioParams = {
  bucketRoute: string;
};

export type TestFailParams = {
  'Do Would you like to throw an exception?': string;
};

export type ConvertMultipleAudiosBody = {
  concatRequestDto: ConcatRequestDto;
  /** ÏóÖÎ°úÎìúÌï† ÌååÏùºÎì§ */
  files: Blob[];
};

export type UploadConcatBody = {
  file: Blob;
};

export type UploadConcatParams = {
  projectId: number;
};

export type UploadFiles1Body = {
  files: Blob[];
};

export type UploadFiles1Params = {
  memberId: number;
  projectId: number;
  audioType: string;
  voiceId: string;
};

export type UploadFilesBody = {
  files: Blob[];
};

export type UploadFilesParams = {
  memberId: number;
  projectId: number;
  audioType: string;
  voiceId: string;
};

export type UploadUnit1Body = {
  file: Blob;
};

export type UploadUnit1Params = {
  detailId: number;
  projectId: number;
};

export type UploadUnitBody = {
  file: Blob;
};

export type UploadUnitParams = {
  detailId: number;
  projectId: number;
};

export type ProcessVCProjectBody = {
  files: Blob[];
  vcSaveDto: VCSaveDto;
};

export type ProcessVCProjectParams = {
  memberId: number;
};

export type SaveVCProjectBody = {
  file?: Blob[];
  metadata: VCSaveDto;
};

export type DataResponseDtoData = { [key: string]: unknown };

export interface DataResponseDto {
  code?: number;
  data?: DataResponseDtoData;
  message?: string;
  success?: boolean;
}

export interface ConcatRequestDetailDto {
  audioSeq?: number;
  checked?: boolean;
  endSilence?: number;
  id?: number;
  sourceAudio?: Blob;
  unitScript?: string;
}

/**
 * ÏöîÏ≤≠ DTO
 */
export interface ConcatRequestDto {
  concatRequestDetails?: ConcatRequestDetailDto[];
  globalFrontSilenceLength?: number;
  globalTotalSilenceLength?: number;
  memberId?: number;
  projectId?: number;
  projectName?: string;
}

export type MemberAudioMetaAudioType =
  (typeof MemberAudioMetaAudioType)[keyof typeof MemberAudioMetaAudioType];

export const MemberAudioMetaAudioType = {
  VC_SRC: 'VC_SRC',
  VC_TRG: 'VC_TRG',
  CONCAT: 'CONCAT',
} as const;

export type MemberAudioMetaAudioFormat =
  (typeof MemberAudioMetaAudioFormat)[keyof typeof MemberAudioMetaAudioFormat];

export const MemberAudioMetaAudioFormat = {
  WAV: 'WAV',
  MP3: 'MP3',
} as const;

export interface Member {
  birthDate?: string;
  createdAt?: string;
  createdBy?: string;
  createdDate?: string;
  deletedAt?: string;
  email?: string;
  gender?: number;
  id?: number;
  is_deleted?: boolean;
  lastModifiedBy?: string;
  lastModifiedDate?: string;
  name?: string;
  phoneNumber?: string;
  pwd?: string;
  tou?: string;
  updatedAt?: string;
}

export interface MemberAudioMeta {
  audioFormat?: MemberAudioMetaAudioFormat;
  audioType?: MemberAudioMetaAudioType;
  audioUrl?: string;
  bucketRoute?: string;
  createdAt?: string;
  createdBy?: string;
  createdDate?: string;
  deletedAt?: string;
  id?: number;
  isDeleted?: boolean;
  lastModifiedBy?: string;
  lastModifiedDate?: string;
  member?: Member;
  script?: string;
  trgVoiceId?: string;
}

export interface ConcatDetailDto {
  audioSeq?: number;
  checked?: boolean;
  endSilence?: number;
  id?: number | null;
  memberAudioMeta?: MemberAudioMeta;
  unitScript?: string;
}

export interface ConcatSaveDto {
  concatDetails?: ConcatDetailDto[];
  globalFrontSilenceLength?: number;
  globalTotalSilenceLength?: number;
  projectId?: number | null;
  projectName?: string;
}

export interface TTSProject {
  id: number;
  projectName: string;
  apiStatus: string;
  fullScript: string;
  globalPitch: number;
  globalSpeed: number;
  globalVolume: number;
  voiceStyleId: number | null;
}

export interface TTSDetailDto {
  id: number | null;
  isDeleted: boolean;
  unitPitch?: number;
  unitScript?: string;
  unitSequence: number;
  unitSpeed?: number;
  unitVoiceStyleId: number | null;
  unitVolume?: number;
  genAudios?: [{ id: number; audioUrl: string }];
}

export interface TTSSaveDto {
  fullScript?: string;
  globalPitch?: number;
  globalSpeed?: number;
  globalVoiceStyleId?: number;
  globalVolume?: number;
  memberId?: number;
  projectId: number | null;
  projectName?: string;
  ttsDetails?: TTSDetailDto[];
}

export interface TTSSpecificResponse {
  ttsProject: TTSProject;
  ttsDetails: TTSDetailDto[];
}

export interface ResponseDto<T = unknown> {
  success: boolean;
  code: number;
  message: string;
  data?: T;
}

export type AudioFileDtoAudioType =
  (typeof AudioFileDtoAudioType)[keyof typeof AudioFileDtoAudioType];

export const AudioFileDtoAudioType = {
  VC_SRC: 'VC_SRC',
  VC_TRG: 'VC_TRG',
  CONCAT: 'CONCAT',
} as const;

export interface AudioFileDto {
  detailId?: number | null;
  localFileName?: string | null;
  unitScript?: string;
  isChecked?: boolean;
  audioType?: 'VC_SRC' | 'VC_TRG' | 'CONCAT';
  s3MemberAudioMetaId?: number | null;
}

export interface VCSaveDto {
  projectId: number | null;
  projectName: string;
  srcFiles: VCSrcFile[];
  trgFiles: VCTrgFile[];
}

export interface Project {
  projectId: number;
  projectType: string;
  projectName: string;
  script?: string;
  projectStatus?: string;
  updatedAt: string;
  createdAt?: string;
}

export interface ProjectsResponse {
  content: Project[];
  pageable: {
    pageNumber: number;
    pageSize: number;
  };
  totalPages: number;
  totalElements: number;
}

export interface WorkspaceProject {
  id: number;
  type: string;
  name: string;
  script?: string;
  status?: string;
  updatedAt: string;
  createdAt?: string;
}

export type workspacesResponse = WorkspaceProject[];

export interface Export {
  projectId?: number;
  url?: string;
  metaId?: number;
  fileName: string;
  downloadLink?: string;
  unitStatus: string;
  projectName: string;
  projectType: string;
  script: string | null;
  createdAt?: string;
  updatedAt?: string;
}

// VC Í¥ÄÎ†® ÌÉÄÏûÖ Ï†ïÏùò ÏàòÏ†ï
export interface VCAudioMeta {
  id: number;
  audioUrl: string;
}

export interface VCProjectResponse {
  id: number;
  projectName: string;
  trgAudios: VCAudioMeta[];
}

export interface VCDetailResponse {
  id: number;
  projectId: number;
  isChecked: boolean;
  unitScript: string;
  srcAudio: string | null;
  genAudios: VCAudioMeta[];
}

export interface VCLoadResponse {
  vcProjectRes: VCProjectResponse;
  vcDetailsRes: VCDetailResponse[];
}

export interface VCSrcFile {
  detailId: number | null;
  localFileName: string | null;
  unitScript: string;
  isChecked: boolean;
}

export interface VCTrgFile {
  audioType: string;
  localFileName: string | null;
  s3MemberAudioMetaId: number | null;
}

// ResponseDto ÏàòÏ†ï (Í∏∞Ï°¥ Ï†ïÏùò ÍµêÏ≤¥)
export interface ResponseDto<T = unknown> {
  success: boolean;
  code: number;
  message: string;
  data?: T;
}
